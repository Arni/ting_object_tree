<?php

/**
 * @file
 * Ting smart carousel module main file.
 */
use OpenSearch\OpenSearchTingObjectCollection;

function ting_object_tree_menu() {
  $items = array();

  $items['romaner/%'] = array(
    'title' => 'Ting object tree',
    'page callback' => 'ting_object_tree_show',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access content'),
    //'type' => MENU_CALLBACK,
  );
  
 return $items;
}

function ting_object_tree_theme($existing, $type, $theme, $path) {
  return array(
      'ting_object_tree_item' => array(
          'variables' => array(
              'title' => NULL,
              'creators' => NULL,
              'cover' => NULL,
          ),
          'template' => 'ting-object-tree-item',
          'path' => $path . '/templates',
      ),
      'ting_object_tree_page' => array(
          'variables' => array(
              'items' => NULL,
              'links' => NULL,
          ),
          'template' => 'ting-object-tree-page',
          'path' => $path . '/templates',
      ),
  );
}

function  ting_object_tree_show ($var1, $var2, $var3) {
    $query = 'krimi';
    $start = 1;
    $size = 50;
    $objects = ting_object_tree_find_entities_with_covers($query, $start, $size, array ());
    file_put_contents("/var/www/drupal7vm/drupal/debug/obj1.txt", print_r($objects , TRUE), FILE_APPEND);
    return theme('ting_object_tree_page', array('items' => $objects, 'links' => NULL));
}

/**
 * Find ting entities with covers from a query.
 *
 * @param string $query
 *   Query to use.
 * @param int $start
 *   Offset to start from.
 * @param int $size
 *   Search chunk size to use.
 * @param array $ignore
 *   Material ids to skip.
 *
 * @return array
 *   Array of found ting entities (an array), next start to use, and whether
 *   the result end was reached.
 */
function ting_object_tree_find_entities_with_covers($query, $start, $size, array $ignore) {
  $entities_found_with_covers = array();
  $finished = FALSE;
  $entities = array();


  // Determine what page we are on based on the start position and size.
  // Start is 0 indexed while page number is 1 indexed.
//  $page = floor($start / $size) + 1;

  $sal_query = ting_start_query()
          ->withRawQuery($query)
         // ->withPage($page)
          ->withCount($size)
          ->withMaterialFilter($ignore, FALSE);

  $sal_query->reply_only = true;
  $results = $sal_query->execute();
file_put_contents("/var/www/drupal7vm/drupal/debug/obj2.txt", print_r($results , TRUE), FILE_APPEND);
  if (!$results->hasMoreResults()) {
    $finished = TRUE;
  }


  foreach ($results->openSearchResult->collections as $collection) {
    $opensearch_collection = new OpenSearchTingObjectCollection($collection);
    $object = $opensearch_collection->getPrimaryObject();
    $entities[$object->getId()] = $object;
  }

  // See what materials have covers.
  $covers = ting_smart_carousel_covers_get(array_keys($entities));

  // Loop over the fetched covers and build items.
  foreach ($covers as $id => $path) {
    $entities_found_with_covers[$id] = $entities[$id];
  }
  
  //$entities_found_with_covers = ting_smart_carousel_sort($entities_found_with_covers, $query); 

  return ting_smart_carousel_proces_results($entities_found_with_covers);
}

// /**
//  * Implements hook_ctools_plugin_directory().
//  *
//  * It simply tells panels where to find the .inc files that define various
//  * args, contexts, content_types.
//  */
//function ting_smart_carousel_ctools_plugin_directory($module, $plugin) {
// if ($module == 'ctools' && !empty($plugin)) {
//   return 'plugins/' . $plugin;
// }
//}
//
// /**
//  * Implements hook_ctools_plugin_api().
//  */
//function ting_smart_carousel_ctools_plugin_api($module, $api) {
//   if ($module == 'page_manager' && $api == 'pages_default') {
//     return array('version' => 1);
//   }
//   if ($module == "strongarm" && $api == "strongarm") {
//    return array("version" => "1");
//  }
//}



/**
 * Get covers for an array of ids.
 *
 * @param array $requested_covers
 *   Ids of entities to return covers for.
 *
 * @return array
 *   Array of id => file path for found covers.
 */
function ting_object_tree_covers_get(array $requested_covers) {
  $entities = array();
  $covers = array();

  // Create array of loaded entities for passing to hooks.
  foreach ($requested_covers as $id) {
    // Ensure that the id at least seems valid.
    if (!mb_check_encoding($id, "UTF-8")) {
      continue;
    }

    // Determine if the local id is a known negative.
    if (cache_get('ting_covers:' . $id, FALSE)) {
      continue;
    }

    // If we we already have a valid cover image, use it.
    $path = ting_covers_object_path($id);
    if (file_exists($path)) {
      $covers[$id] = $path;
      continue;
    }

    // Queue for fetching by hook.
    $entities[$id] = ''; //ding_entity_load($id);
  }

  // Fetch covers by calling hook.
  foreach (module_implements('ting_covers') as $module) {
    foreach (module_invoke($module, 'ting_covers', $entities) as $id => $uri) {
      if ($uri && $path = _ting_covers_get_file($id, $uri)) {
        $covers[$id] = $path;
      }
      // Remove elements where a cover has been found, or suppressed.
      unset($entities[$id]);
    }
  }

  // Mark all remaining as not found in cache.
  foreach ($entities as $id => $entity) {
    cache_set('ting_covers:' . $id, 1, 'cache', $_SERVER['REQUEST_TIME'] + TING_COVERS_DEFAULT_CACHE_LIFETIME);
  }

  return $covers;
}
