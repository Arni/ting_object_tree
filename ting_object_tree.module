<?php

/**
 * @file
 * Ting smart carousel module main file.
 */
use OpenSearch\OpenSearchTingObjectCollection;


function ting_object_tree_menu() {
  $items = array();

  $items['bog/%/%/%'] = array(
      'title' => 'Ting object tree',
      'page callback' => 'ting_object_tree_show',
      'page arguments' => array(0, 1, 2, 3),
      'access arguments' => array('access content'),
  );

  return $items;
}

function ting_object_tree_theme($existing, $type, $theme, $path) {
  return array(
      'ting_object_tree_item' => array(
          'variables' => array(
              'title' => NULL,
              'creators' => NULL,
              'cover' => NULL,
          ),
          'template' => 'ting-object-tree-item',
          'path' => $path . '/templates',
      ),
      'ting_object_tree_page' => array(
          'variables' => array(
              'items' => NULL,
              'links' => NULL,
          ),
          'template' => 'ting-object-tree-page',
          'path' => $path . '/templates',
      ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_object_tree_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

function ting_object_tree_show($type, $adult, $fiction, $subject) {

  $query = ting_object_tree_get_query($type, $adult, $fiction, $subject);
  $start = 1;
  $size = 50;
   
  $result = ting_object_tree_find_entities_with_covers($query, $start, $size, array());

  return theme('ting_object_tree_page', array('items' => $result['objects'], 'links' =>  $result['links']));
}



function ting_object_tree_get_query($type, $adult, $fiction, $subject) {
   $query = ting_object_tree_get_type($type);
   if ($adult == 'børn') {
     $query .= ' and facet.category="børnematerialer"';
   } else {
     $query .= ' and facet.category="voksenmaterialer"';
   }
   if ($fiction == 'fag') {
     $query .= ' and facet.genreCategory="nonfiktion"';
   } else {
     $query .= ' and facet.genreCategory="fiktion"';
   }
   $query .= ' and facet.subject="' . $subject . '"';
   file_put_contents("/var/www/drupal7vm/drupal/debug/newobj.txt", print_r($query, TRUE), FILE_APPEND);
   return $query;
}

function ting_object_tree_get_type($type) {
  return 'facet.type="' . $type . '"';
}

/**
 * Find ting entities with covers from a query.
 *
 * @param string $query
 *   Query to use.
 * @param int $start
 *   Offset to start from.
 * @param int $size
 *   Search chunk size to use.
 * @param array $ignore
 *   Material ids to skip.
 *
 * @return array
 *   Array of found ting entities (an array), next start to use, and whether
 *   the result end was reached.
 */
function ting_object_tree_find_entities_with_covers($query, $start, $size, array $ignore) {
  $entities_found_with_covers = array();
  $finished = FALSE;
  $entities = array();

  $sal_query = ting_start_query()
          ->withRawQuery($query)
          ->withFacets(array('facet.subject'))
          ->withTermsPrFacet(26)
          ->withSort('date_descending')
          // ->withPage($page)
          ->withCount($size)
          ->withMaterialFilter($ignore, FALSE);

  $sal_query->reply_only = true;
  $results = $sal_query->execute();

  if (!$results->hasMoreResults()) {
    $finished = TRUE;
  }
  $collections = $results->getTingEntityCollections();

  
 $collections = $results->getTingEntityCollections();
  foreach ($results->openSearchResult->collections as $collection) {
    $object = $collection->getPrimary_object();
    $entities[$object->getId()] = $object;
  }
file_put_contents("/var/www/drupal7vm/drupal/debug/newobj2.txt", print_r($entities, TRUE), FILE_APPEND);
  // See what materials have covers.
  $covers = ting_covers_get(array_keys($entities));

  // Loop over the fetched covers and build items.
  foreach ($covers as $id => $path) {
    $entities_found_with_covers[$id] = $entities[$id];
  }
  
  $objects =  ting_object_tree_proces_results($entities_found_with_covers);
  $links = '';//ting_object_tree_get_subjects($results);
  $result = array(
          'objects' => $objects,
          'links' => $links,
  );

  return $result;
}

function ting_object_tree_proces_results(array $objects) {
  $items = array();
  foreach ($objects as $object) {
  $cover = ting_object_tree_get_cover($object);
  $creators = ting_object_tree_get_creators($object);
  $items[] = theme ('ting_object_tree_item', array('title' => $object->getTitle(), 'creators' => $creators, 'cover' => $cover,));
  }
  return $items;
}

function ting_object_tree_get_cover($object) {
  $image = theme('ting_object_cover', array('elements' => array('#object' => $object, '#image_style' => 'ding_list_medium')));
  $options = array(
      'html' => TRUE,
      'attributes' => array('title' => $object->getTitle()),
  );
  return l($image, ting_object_tree_uri($object), $options);
}
function ting_object_tree_get_creators($object) {
  if (count($object->getCreators())) {
    if ($object->getDate()!= '') {
      $markup_string = t('By !author_link (@year)', array(
          '!author_link' => implode(', ', $object->getCreators()),
          // So wrong, but appears to be the way the data is.
          '@year' => $object->getDate(),
      ));
    } else {
      $markup_string = t('By !author_link', array(
          '!author_link' => implode(', ', $object->getCreators()),
      ));
    }
  } elseif ($object->getDate() != '') {
    $markup_string = t('(@year)', array('@year' => $object->getDate()));
  }
  return $markup_string;
}

function ting_object_tree_uri($object) {
  return 'ting/collection/' . $object->id;
}

function ting_object_tree_get_subjects($results) {
  $facets = $results->getFacets();
  $path = request_path();
  $path_elements = explode('/', $path);
  $current = end($path_elements);
  $links = array();
  foreach ($facets['facet.subject']->getTerms() as $term ) {
    if ($term->getName() != $current) {
      $links[] = l($term->getName() . ' (' . $term->getCount() . ')', $path . '/' . $term->getName());
    }
  }
  file_put_contents("/var/www/drupal7vm/drupal/debug/obj12.txt", print_r($facets, TRUE), FILE_APPEND);
  return $links;
}


function ting_object_tree_get_breadcrumb($object) {
  $ting_object = $object->getTingObject();
  file_put_contents("/var/www/drupal7vm/drupal/debug/newobj5.txt", print_r($ting_object , TRUE), FILE_APPEND);
  $type = $ting_object->getType();
  $audience = $ting_object->getAudience();
  if (isset($audience) && $audience[0] == 'børnematerialer') {
    $audience = 'børn';
  } else {
    $audience = 'voksen';
  }
  file_put_contents("/var/www/drupal7vm/drupal/debug/newobj6.txt", print_r($audience, TRUE), FILE_APPEND);
  if ($ting_object->isFiction()) {
    $fiction = 'skøn';
  } else {
    $fiction = 'fag';
  }
  $subject = ting_object_tree_get_subject($ting_object); 
  $link_text = $type . '->' . $audience . '->' . $fiction . '->' . $subject;
  $path = '/' . $type . '/' . $audience . '/' . $fiction . '/' . $subject;
  $bread_crumb = l($link_text, $path);
   file_put_contents("/var/www/drupal7vm/drupal/debug/newobj7.txt", print_r($bread_crumb, TRUE), FILE_APPEND);
  return $bread_crumb;
}

function ting_object_tree_get_subject($object) {
  $subject = null;
  $subjects = $object->getSubjects();
  $genre = $object->getGenre();
  file_put_contents("/var/www/drupal7vm/drupal/debug/newobj11.txt", print_r($subjects, TRUE), FILE_APPEND);
  if (isset($genre) && !empty($genre)) {
    $subject = $genre[0];
    //file_put_contents("/var/www/drupal7vm/drupal/debug/path21.txt", print_r($genre  , TRUE), FILE_APPEND);
  } elseif (isset($subjects) && !empty($subjects)) {
    $subject = ting_object_tree_choose_subject($subjects) ;
  } else {
    $subject = 'ingetemne';
  }
  //file_put_contents("/var/www/drupal7vm/drupal/debug/path22.txt", print_r($subject  , TRUE), FILE_APPEND);
  return $subject;
}

function ting_object_tree_choose_subject($subjects) {
  $subject_list = variable_get('ting_object_tree_subject_list');
  if (!(isset($subject_list))) {
    $module_path = drupal_get_path('module', 'ting_object_tree');
    file_put_contents("/var/www/drupal7vm/drupal/debug/newobj9.txt", print_r('/' . $module_path . '/data/serialized_subjects.txt', TRUE), FILE_APPEND);
    $data = file_get_contents($module_path . '/data/serialized_subjects.txt');
    if (isset($data)) {
      $subject_list = unserialize($data);
    }
    variable_set('ting_object_tree_subject_list', $subject_list);
  }
  file_put_contents("/var/www/drupal7vm/drupal/debug/newobj11.txt", print_r($subjects, TRUE), FILE_APPEND);
  $subject_on_list = array();
  foreach ($subjects as $subject) {
     if (array_key_exists($subject, $subject_list)) {
       $subject_on_list[$subject] = $subject_list[$subject];
     }
  }
  if (!(empty($subject_on_list))) {
    arsort($subject_on_list);
    file_put_contents("/var/www/drupal7vm/drupal/debug/newobj10.txt", print_r($subject_on_list, TRUE), FILE_APPEND);
    $keys = array_keys($subject_on_list);
    return $keys[0] ;
  } else {
    return $subjects[0];
  }

  file_put_contents("/var/www/drupal7vm/drupal/debug/newobj8.txt", print_r($subject_list, TRUE), FILE_APPEND);
}

/**
 * Get covers for an array of ids.
 *
 * @param array $requested_covers
 *   Ids of entities to return covers for.
 *
 * @return array
 *   Array of id => file path for found covers.
 */
function ting_object_tree_covers_get(array $requested_covers) {
  $entities = array();
  $covers = array();

  // Create array of loaded entities for passing to hooks.
  foreach ($requested_covers as $id) {
    // Ensure that the id at least seems valid.
    if (!mb_check_encoding($id, "UTF-8")) {
      continue;
    }

    // Determine if the local id is a known negative.
    if (cache_get('ting_covers:' . $id, FALSE)) {
      continue;
    }

    // If we we already have a valid cover image, use it.
    $path = ting_covers_object_path($id);
    if (file_exists($path)) {
      $covers[$id] = $path;
      continue;
    }

    // Queue for fetching by hook.
    $entities[$id] = ''; //ding_entity_load($id);
  }

  // Fetch covers by calling hook.
  foreach (module_implements('ting_covers') as $module) {
    foreach (module_invoke($module, 'ting_covers', $entities) as $id => $uri) {
      if ($uri && $path = _ting_covers_get_file($id, $uri)) {
        $covers[$id] = $path;
      }
      // Remove elements where a cover has been found, or suppressed.
      unset($entities[$id]);
    }
  }

  // Mark all remaining as not found in cache.
  foreach ($entities as $id => $entity) {
    cache_set('ting_covers:' . $id, 1, 'cache', $_SERVER['REQUEST_TIME'] + TING_COVERS_DEFAULT_CACHE_LIFETIME);
  }

  return $covers;
}
